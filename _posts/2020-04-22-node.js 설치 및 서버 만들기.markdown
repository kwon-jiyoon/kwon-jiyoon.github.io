---
layout: post
title: "Node.js로 서버 만들기 - 어울림 3&4주차 "
date: 2020-05-18
categories:
  - Jiyoon
description:
image: https://picsum.photos/2000/1200?image=1003
image-sm: https://picsum.photos/500/300?image=1003
---

<h3>1. 노드 시작하기</h3>

<figure>
  <img src="https://blog.naver.com/love_junim/220565922518" alt="Placeholder"/>
</figure>

<h4>1.1 노드란</h4>
노드 : 크롬 V8 자바스크립트 엔진으로 빌드 된 자바스크립트 런타임입니다. 
Node.js는 이벤트 기반, 논블로킹 I/O 모델을 사용해 가볍고 효율적입니다. 
Node.js의 패키지 생태계인 npm은 세계에서 가장 큰 오픈 소스 라이브러리 생태계이기도 합니다.

서버 : 네트워크를 통해 클라이언트에 정보나 서비스를 제공하는 컴퓨터 또는 프로그램
클라이언트 : 요청을 보내는 주체


<figure>
  <img src="https://blog.naver.com/love_junim/220565922518" alt="Placeholder"/>
</figure>

ex) 길벗출판사의 웹 사이트 방문
 = 주소창에 길벗출판사의 웹 사이트 주소를 입력(요청)하면, 
 브라우저는 그 주소에 해당하는 길벗출판사의 컴퓨터 위치를 파악 
 그 컴퓨터에서 길벗출판사의 웹 사이트 페이지르 받아와 요청자의 브라우저(클라이언트)에 띄움(응답). 
 이런 일을 하는 컴퓨터가 바로 서버
 
ex) 모바일 앱을 설치
 = 애플의 앱스토어에서 원하는 앱을 골라서 설치 버튼을 누르면(요청) 내려받기(응답)가 시작   
 앱 설치 파일은 이미 어딘가에 저장되어 있으므로 여러분이 그곳에서 데이터를 받아와 
 모바일 기기에 설치할 수 있는 것. 그 어딘가가 구글과 애플의 서버

<ul>
 <li>서버는 클라이언트의 요청에 대해 응답</li>
 <li>응답은 항상 YES가 아닐 수도 있음. 만약 해당 사이트에 차단 당했다면 응답은 늘 NO</li>
 <li>서버가 다른 서버에 요청을 보낼 수도 있음. 이 때 요청을 보낸 서버가 클라이언트가 됨</li>
</ul>

자바스크립트 런타임 : 자바스크립트 프로그램을 컴퓨터에서 실행할 수 있다
 런타임 : 특정 언어로 만든 프로그램을 실행할 수 있는 환경

이벤트 기반 : 이벤트가 발생할 때 미리 지정해둔 작업을 수행하는 방식
 이벤트 : 클릭, 네트워크 요청 등
이벤트 발생할 때 미리 지정해둔 작업 = 이벤트 리스너에 콜백 함수를 미리 등록
 => 이벤트가 발생하면 이벤트 리스너에 등록해둔 콜백 함수를 호출
   ex) 버튼을 누르면 경고창 : 클릭 이벤트 리스너에 경고 창을 띄우는 콜백 함수를 등록해두면 
   클릭 이벤트가 발생할 때마다 콜백 함수가 실행돼 경고 창이 뜨는 것

* 호출한 함수가 호출 스택에 쌓이면, 호출된 순서 반대로 실행된다.
 이벤트 루프 : 여러 이벤트가 동시에 발생했을 때 호출된 콜백 함수의 실행 순서를 결정
		       노드가 종료될 때까지 이벤트 처리르 위한 작업을 반복하므로 루프라고 불림
태스크 큐 : 이벤트 발생 후 호출되어야 할 콜백 함수들이 기다리는 공간
		     콜백들이 이벤트 루프가 정한 순서대로 줄을 서 있으므로 콜백 큐라고 부름
 백그라운드 : 타이머나 I/O 작업 콜백 또는 이벤트 리스너들이 대기하는 곳

- 이벤트 루프를 잘 활용하면 오래 걸리는 작업을 효율적으로 처리할 수 있음

<ol>
호출 순서 : main() – setTimeout() 
실행 순서 
<li> setTimeout 실행(setTimeout 안 run콜백을 백그라운드에 보냄) 후 스택에서 빠짐</li>
<li> main 실행 후 스택에서 빠짐 </li>
<li> 백그라운드에서 3초를 센 후 run 함수를 태스크 큐로 보냄</li>
<li> 호출 스택 실행이 끝나 비워지면 이벤트 루프가 태스크 큐의 콜백을 호출 스택으로 올림</li>
<li> run이 호출 스택에서 실행 후 비워지고, 이벤트 루프는 태스크 큐에 콜백이 생길때까지 대기</li>
</ol>

논블로킹 I/O
논블로킹 : 이전 작업이 완료될 때까지 멈추지 않고 다음 작업을 수행함  블로킹
* setTimeout(콜백, 0)을 활용하여 오래 걸리는 작업을 태스크 큐로 보내 놓고 
다음 작업을 먼저 수행하는 기법을 사용한다 



싱글 스레드  멀티 스레드
 * 스레드 : 컴퓨터 작업을 처리할 수 있는 일손

싱글 스레드 & 블로킹 = 유일한 점원(스레드)이 한 손님의 주문을 받고 
그 주문에 대한 서빙까지 끝낸 후 다음 손님의 주문을 받는 것

싱글 스레드 & 논블로킹 = 유일한 점원이 유동적으로 주문과 서빙을 하는 것
 - 노드가 채택하고 있는 방식
 - 점원이 많은 일을 할 수 있지만, 아프거나 하면(에러) 큰 문제가 생길 수 있다
 - 주문이나 서빙에 시간이 오래 걸린다면 주문이 많이 들어 왔을 때 문제가 생길 수 있다 

멀티 스레드 & 블로킹 = 여러 점원이 각 손님을 담당하는 것
 - 손님 수가 줄었을 때 일을 하지 않고 노는 점원이 생길 수 있다
 - 점원을 새로 고용하거나 기존 직원을 해고하는 데는 비용이 발생한다

프로세스와 스레드의 차이
 프로세스 : 운영체제에서 할당하는 작업의 단위. 노드나 인터넷 브라우저 같은 프로그램이 
 개별적인 프로세스이다. 프로세스 간에는 메모리 등의 자원을 공유하지 않는다.
 
 스레드 : 프로세스 내에서 실행되는 흐름의 단위. 하나의 프로세스는 스레드를 여러 개 가질 수 있다. 
 스레드들은 부모 프로세스의 자원을 공유한다. 즉, 같은 메모리에 접근할 수 있다.
 
<h3>1.2 서버로서의 노드</h3>
 ( 노드가 싱글 스레드, 논블로킹 모델이므로 노드 서버 역시 동일 )
 장점 : 멀티 스레드 방식보다는 컴퓨터 자원을 적게 사용, 웹 서버가 내장, 자바스크립트 사용
 단점 : CPU 코어를 하나밖에 사용하지 못함(CPU 작업이 많은 서버로는 부적합)

 노드 사용 – 개수는 많지만 크기는 작은 데이터를 실시간으로 주고 받는 데 적합
           - 네트워크나 데이터베이스, 디스크 작업 같은 I/O에 특화
           - 실시간 채팅 애플리케이션, 주식 차트, JSON 데이터를 제공하는 API 서버가 사용

#1주차

한 번에 주석처리
 ctrl + /
 shift + alt + a

== : 타입은 상관없이 값이 같으면 true  
ex) 1 == “1”  -> true
=== : 타입형까지 같아야 true

visual studio code 들여쓰기 정리
 = ctrl + k + f
 
 
